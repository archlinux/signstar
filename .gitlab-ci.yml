# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
variables:
  CACHE_COMPRESSION_FORMAT: tarzstd
  RUST_BACKTRACE: full
  CARGO_HOME: $CI_PROJECT_DIR/.cargo-home
  # enable timestamps in logs: https://docs.gitlab.com/ci/jobs/job_logs/#job-log-timestamps
  FF_TIMESTAMPS: true
  SIGNSTAR_COVERAGE: true

stages:
  - check
  - test
  - signstaros
  - publish
  - report
  - pages

# default setup running on default branch and in MRs
.default:
  image: registry.archlinux.org/archlinux/archlinux-docker:base-master
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring
    - source .env && pacman -Syu --needed --noconfirm $PACMAN_PACKAGES
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# default setup with Rust tools running on default branch and in MRs
.default-rust:
  extends: .default
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring
    - source .env && pacman -Syu --needed --noconfirm $PACMAN_PACKAGES
    - just install-rust-dev-tools

commits:
  extends: .default
  script:
    # fetch the default branch as we need it for comparison
    - git fetch origin $CI_DEFAULT_BRANCH
    # setup a dummy user as `cog verify` needs that
    - git config --local user.name "Foobar McFooface"
    - git config --local user.email "foobar@mcfooface.com"
    - just check-commits
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: check

spelling:
  extends: .default
  script:
    - just check-spelling
  stage: check

formatting:
  extends: .default-rust
  script:
    - just check-formatting
  stage: check

shell-code:
  extends: .default
  script:
    - just check-shell-code
  stage: check

rust-code:
  extends: .default-rust
  script:
    - just check-rust-code
  stage: check
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - .cargo-home
    policy: pull-push

unused-deps:
  extends: .default-rust
  script:
    - just check-unused-deps
  stage: check

dependencies:
  extends: .default-rust
  script:
    - just check-dependencies
  stage: check

licenses:
  extends: .default
  script:
    - just check-licenses
  stage: check

links:
  extends: .default
  script:
    - just check-links
  stage: check

test:
  extends: .default-rust
  script:
    - just test
    - just create-coverage-report doc unit-test-coverage
  stage: test
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - .cargo-home
    policy: pull-push
  coverage: "/Test-coverage: ([0-9.]*)%/"
  artifacts:
    reports:
      # Unit test reports
      # See: https://gitlab.archlinux.org/help/ci/testing/unit_test_reports#how-to-set-it-up
      junit: target/nextest/default/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: target/llvm-cov/cobertura-coverage.xml
      # Expose the code coverage as a GitLab metric.
      # This allows us to easily spot changes in the overall coverage.
      metrics: target/llvm-cov/coverage-metrics.txt

integration-test:
  extends: .default
  script:
    - useradd -m testuser
    - chown -R testuser:testuser .
    - WORKDIR="$(pwd)" runuser -w CI,WORKDIR,SIGNSTAR_COVERAGE -l testuser -c 'env && cd "$WORKDIR" && just install-rust-dev-tools'
    - WORKDIR="$(pwd)" runuser -w CI,WORKDIR,SIGNSTAR_COVERAGE -l testuser -c 'env && cd "$WORKDIR" && just nethsm-integration-tests'
    - WORKDIR="$(pwd)" runuser -w CI,WORKDIR,SIGNSTAR_COVERAGE -l testuser -c 'env && cd "$WORKDIR" && just containerized-integration-tests'
    - WORKDIR="$(pwd)" runuser -w CI,WORKDIR,SIGNSTAR_COVERAGE -l testuser -c 'env && cd "$WORKDIR" && just create-coverage-report doc integration-test-coverage'
  stage: test
  timeout: 20m
  tags:
    - vm
  coverage: "/Test-coverage: ([0-9.]*)%/"
  artifacts:
    reports:
      # Unit test reports
      # See: https://gitlab.archlinux.org/help/ci/testing/unit_test_reports#how-to-set-it-up
      junit: target/nextest/default/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: target/llvm-cov/cobertura-coverage.xml
      # Expose the code coverage as a GitLab metric.
      # This allows us to easily spot changes in the overall coverage.
      metrics: target/llvm-cov/coverage-metrics.txt

test-readmes:
  extends: .default
  script:
    - useradd -m testuser
    - chown -R testuser:testuser .
    - WORKDIR="$(pwd)" runuser -w CI,WORKDIR -l testuser -c 'env && cd "$WORKDIR" && just install-rust-dev-tools && just test-readmes'
  stage: test
  tags:
    - vm

build-image:
  extends: .default
  dependencies: []
  script:
    # show the mkosi version
    - mkosi --version
    - useradd -m testuser
    - chown -R testuser:testuser .
    # prepare an ephemeral OpenPGP signing key
    - export KEY="$(mktemp)"
    - rsop generate-key --signing-only test > "$KEY"
    - chown testuser:testuser "$KEY"
    - WORKDIR="$(pwd)" runuser -w WORKDIR,KEY -l testuser -c 'cd "$WORKDIR" && just build-image "$KEY"'
  stage: signstaros
  tags:
    - vm

build-test-image:
  extends: .default
  dependencies: []
  script:
    # show the mkosi version
    - mkosi --version
    - useradd -m testuser
    - chown -R testuser:testuser .
    # prepare an ephemeral OpenPGP signing key
    - export KEY="$(mktemp)"
    - rsop generate-key --signing-only test > "$KEY"
    - chown testuser:testuser "$KEY"
    # install required Rust toolchain
    - WORKDIR="$(pwd)" runuser -w WORKDIR -l testuser -c 'cd "$WORKDIR" && just install-rust-dev-tools'
    - WORKDIR="$(pwd)" runuser -w WORKDIR,KEY -l testuser -c 'cd "$WORKDIR" && just build-test-image "$KEY"'
  stage: signstaros
  tags:
    - vm

crates_publish:
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring
    - source .env && pacman -Syu --needed --noconfirm $PACMAN_PACKAGES
    - just install-rust-dev-tools
  dependencies: []
  rules:
    - if: '$CARGO_REGISTRY_TOKEN && $CI_COMMIT_TAG && $CI_PROJECT_PATH == "archlinux/signstar"'
  script:
    - just ci-publish
  stage: publish
  tags:
    - secure

issue-bot:
  dependencies: []
  stage: report
  image: registry.gitlab.com/gitlab-org/distribution/issue-bot:latest
  script: /issue-bot
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_failure

pages:
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring
    - source .env && pacman -Syu --needed --noconfirm $PACMAN_PACKAGES
    - just install-rust-dev-tools
  dependencies: []
  stage: pages
  script:
    - just build-book
  artifacts:
    paths:
      - output/docs
  publish: output/docs
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
